//	PDK13 peephole rules
$py(
#	$(PEEPFILE):$(PEEPFILE).pe
#		Python\Scripts\expander.py -f $< > $@
#	tabs=4

def msk(i):		return f'#0x{1<<i:02x}'		#'#0x{:02x}'.format(1<<i)
def imsk(i):	return f'#0x{~(1<<i)&0xff:02x}'
)$extend(msk,imsk)\

//	----	conditional jumps	-----------------------------------------------
$for(pair in [('t0sn','t1sn'),('t1sn','t0sn')]) $for(mem in ('','.io'))
replace restart {
%1:
	$(pair[0])$(mem)	%3,%4
	goto	%2
	goto	%1
} by {	; peephole ( untwist conditional jumps back $(pair[0]) -> $(pair[1]) )
%1:
	$(pair[1])$(mem)	%3,%4
	goto	%1
	goto	%2
}

replace restart {
	$(pair[0])$(mem)	%3,%4
	goto	%2
	goto	%1
%2:
} by {	; peephole ( untwist conditional jumps forward $(pair[0]) -> $(pair[1]) )
	$(pair[1])$(mem)	%3,%4
	goto	%1
	goto	%2
%2:
}
$endfor $endfor\

//	----	bit movements	-----------------------------------------------
$for(i in range(8)) $for(inst in ['t0sn','t1sn'] )
replace restart {
	$(inst).io	f, %4
	goto	%2
	mov.io	%1, %5
	or		%1, $msk(i)
	goto	%3
%2:
	mov.io	%1, %5
	and		%1, $imsk(i)
%3:
	mov.io	%5, %1
} by {	; peephole ( $(inst) bit set/clear )
	$(inst).io	f, %4
	goto	%2
	set1.io	%5, #$(i)
	goto	%3
%2:
	set0.io	%5, #$(i)
%3:
}
$py('''
}if notUsed('a')	//--FIXME:
}if notUsed(%1)		//--FIXME:
''')\
$endfor $endfor\

//	----	bit ops	-----------------------------------------------------------
$for(i in range(8))	$for(mem in ('','.io'))
replace restart {
	mov$(mem)	a, %2
	and		a, $msk(i)
	ceqsn	a, #0x00
	goto	%1
} by {; peephole ( bit-wait$(mem) %2 $(i) )
	t0sn$(mem)	%2, #$(i)
	goto	%1
} //if notUsed('a')
$endfor $endfor\

$for(i in range(8)) $for(P in [('and','set0',imsk), ('or','set1',msk)])
replace restart {
	mov		a, $(P[2](i))
	$(P[0])	%1, a
} by {; peephole ( $(P[0]) -> $(P[1]) )
	$(P[1])	%1, #$(i)
}if notUsed('a')
$endfor $endfor\

//	----	misc	-----------------------------------------------------------
replace restart {
	goto	%1
%1:
} by {	; peephole ( jmp +1 )
%1:
}

replace restart {
	call	%1
	mov		%2, a
	call	%3
	mov		%4, a
	mov		a, %2
	sub		a, %5
	mov		a, %4
	subc	a, %6
} by {	; peephole ( const sub16 )
	call	%1
	sub		a, %5
	call	%3
	subc	a, %6
}//if notUsed(%2)

//-----------------------------------------------------------------------------
$py('''		------------ scratch -----------

''')\
